# This is a basic workflow to help you get started with Actions
name: CI
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
env:
  REGISTRY_NAME: myacr0788
  CLUSTER_NAME: myacr0788
  CLUSTER_RESOURCE_GROUP: MyRG
  NAMESPACE: default
  SECRET: containersecret
  APP_NAME: aks-container-githubactions
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    
    # Connect to Azure Container Registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    # Container build and push to a Azure Container Registry (ACR)
    - run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:$GITHUB_RUN_ID
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:$GITHUB_RUN_ID
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:latest
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:latest
        
    - uses: cschleiden/replace-tokens@v1
      with:
        files: '["**/aksdeploy.yaml"]'
      env:
        acrimageurl: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:latest

          # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
        
         #Create namespace if doesn't exist
    #- run: |
       #kubectl create namespace ${{ env.NAMESPACE }} client -o json | kubectl apply -f -
  
  # Create image pull secret for ACR
    - uses: azure/k8s-create-secret@v1
      with:
          container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          arguments: --force true
     
     # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          aksdeploy.yaml
        #images: |
          #${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}
        #imagepullsecrets: |
          #${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}
